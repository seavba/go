---
name: "workflow"

'on':
  push:
    branches:
      - main
      - master
    paths:
      - 'app/**/*'
      - 'testing/**/*'
      - 'Dockerfile'
    tags:
      - "*"
  pull_request:
    branches:
      - main
      - master
jobs:
  ci:
    name: "Integration"
    runs-on: "ubuntu-latest"
    steps:

      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Get vars values
        id: vars
        run: |
          echo "ecr_repo=$(grep -A1 ecr_repo ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "image_tag=$(grep -A1 image_tag ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "service=$(grep -A1 aws_ecs_service ./iac/ecs.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "cluster=$(grep -A1 'resource "aws_ecs_cluster"' ./iac/ecs.tf | tail -n 1  | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "region=$(grep -A1 aws_region ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "domain=$(grep -A1 domain_name ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV

      - name: Update domain in index.html
        id: domain
        run: sed -i "s/localhost/${{ env.domain }}/g" app/static/index.html

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag image
        id: testing-build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  ${{ env.ecr_repo }}
          IMAGE_TAG: ${{ env.image_tag }}
        run: |
          # Build a docker container and push it to ECR.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: set registry as env vars
        run: echo "registry=${{ steps.login-ecr.outputs.registry }}" >>  $GITHUB_ENV

      - name: Run docker compose container for testing
        run: docker-compose -f "testing/docker-compose.yml" up -d

      - name: Run testing
        run: bash testing/test.sh

      - name: Stop docker compose
        run: docker-compose -f "testing/docker-compose.yml" down

      - name: Push image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  ${{ env.ecr_repo }}
          IMAGE_TAG: ${{ env.image_tag }}
        run: |
          # Build a docker container and push it to ECR.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  cd:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    needs:
      - ci
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Get vars values
        id: vars
        run: |
          echo "ecr_repo=$(grep -A1 ecr_repo ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "image_tag=$(grep -A1 image_tag ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "service=$(grep -A1 aws_ecs_service ./iac/ecs.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "cluster=$(grep -A1 'resource "aws_ecs_cluster"' ./iac/ecs.tf | tail -n 1  | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "region=$(grep -A1 aws_region ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV
          echo "domain=$(grep -A1 domain_name ./iac/variables.tf | tail -n 1 | awk -F '\"' '{print $2}')" >> $GITHUB_ENV

      - name: Update domain in index.html
        id: domain
        run: sed -i "s/localhost/${{ env.domain }}/g" app/static/index.html

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition fargate_ecs_task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY:  ${{ env.ecr_repo }}
          IMAGE_TAG: ${{ env.image_tag }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: fargate_ecs_task  # edit me
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ecr_repo }}:${{ env.image_tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.service }}
          cluster: ${{ env.cluster }}
          wait-for-service-stability: true
